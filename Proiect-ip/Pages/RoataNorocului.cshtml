@page
@model RoataNoroculuiModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Roata Norocului</title>
    <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <link rel="stylesheet" href="your-style.css"> <!-- Asigură-te că stilurile sunt corecte -->
    <style>
        #indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 30px;
            z-index: 10; /* Asigură-te că indicatorul va fi deasupra roții */
        }
        /* Adăugăm un stil pentru roata care să nu fiți deranjat de alte elemente */
        .chartholder {
            position: relative;
        }
    </style>
</head>
<body>

    <div id="chart"></div>

    <!-- Indicatorul fix lângă roată -->
    <div id="indicator" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <span style="font-size: 30px;">🔼</span> <!-- Poți schimba săgeata cu un simbol sau o imagine -->
    </div>
    
    <!-- Butonul pentru a roti roata -->
    <button id="spinButton" onclick="spin()">Rotește Roata</button>

    <script>
        var data = @Html.Raw(Json.Serialize(Model.Items));

        var padding = { top: 20, right: 40, bottom: 0, left: 0 },
            w = 500 - padding.left - padding.right,
            h = 500 - padding.top - padding.bottom,
            r = Math.min(w, h) / 2,
            rotation = 0,
            oldrotation = 0,
            picked = 100000,
            oldpick = [],
            color = d3.scale.category20();

        var svg = d3.select('#chart')
            .append("svg")
            .data([data])
            .attr("width", w + padding.left + padding.right)
            .attr("height", h + padding.top + padding.bottom);

        var container = svg.append("g")
            .attr("class", "chartholder")
            .attr("transform", "translate(" + (w / 2 + padding.left) + "," + (h / 2 + padding.top) + ")");

        var vis = container.append("g");

        var pie = d3.layout.pie().sort(null).value(function (d) { return 1; });

        var arc = d3.svg.arc().outerRadius(r);

        var arcs = vis.selectAll("g.slice")
            .data(pie)
            .enter()
            .append("g")
            .attr("class", "slice");

        arcs.append("path")
            .attr("fill", function (d, i) { return color(i); })
            .attr("d", function (d) { return arc(d); });

        arcs.append("text").attr("transform", function (d) {
            d.innerRadius = 0;
            d.outerRadius = r;
            d.angle = (d.startAngle + d.endAngle) / 2;
            return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")translate(" + (d.outerRadius - 10) + ")";
        })
            .attr("text-anchor", "end")
            .text(function (d, i) {
                return data[i].label;
            });

        function spin() {
            container.on("click", null);
            if (oldpick.length == data.length) {
                container.on("click", null);
                return;
            }

            var ps = 360 / data.length,
                pieslice = Math.round(1440 / data.length),
                rng = Math.floor((Math.random() * 1440) + 360);

            rotation = (Math.round(rng / ps) * ps);

            picked = Math.round(data.length - (rotation % 360) / ps);
            picked = picked >= data.length ? (picked % data.length) : picked;

            if (oldpick.indexOf(picked) !== -1) {
                d3.select(this).call(spin);
                return;
            } else {
                oldpick.push(picked);
            }

            rotation += 90 - Math.round(ps / 2);
            vis.transition()
                .duration(3000)
                .attrTween("transform", rotTween)
                .each("end", function () {
                    // Eliminăm schimbarea culorii premiului
                    // d3.select(".slice:nth-child(" + (picked + 1) + ") path").attr("fill", "#111");
                    d3.select("#question h1").text(data[picked].question);

                    // Setăm indicatorul pe premiul ales
                    var angle = (rotation % 360) - 90; // Calculăm unghiul pentru indicator
                    var indicator = document.getElementById("indicator");
                    var x = Math.cos(angle * Math.PI / 180) * (r + 20) + (w / 2 + padding.left);
                    var y = Math.sin(angle * Math.PI / 180) * (r + 20) + (h / 2 + padding.top);
                    indicator.style.left = `${x}px`;
                    indicator.style.top = `${y}px`;

                    oldrotation = rotation;
                    container.on("click", spin);
                });
        }

        function rotTween(to) {
            var i = d3.interpolate(oldrotation % 360, rotation);
            return function (t) {
                return "rotate(" + i(t) + ")";
            };
        }
    </script>

</body>
</html>
